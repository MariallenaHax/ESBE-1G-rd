// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

#include "fragmentVersionCentroid.h"

#if __VERSION__ >= 300

#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
_centroid in highp vec2 uv;
#else
_centroid in vec2 uv;
#endif

#else

varying vec2 uv;

#endif

#include "uniformWorldConstants.h"
#include "uniformPerFrameConstants.h"
#include "uniformShaderConstants.h"
#include "uniformRenderChunkConstants.h"
#include "util.h"

varying vec3 pos;
varying vec4 pl;

uniform sampler2D TEXTURE_0;
uniform sampler2D TEXTURE_1;

float noise(float t)
{
	return fract(cos(t) * 3800.);
}

vec3 lensflare(vec2 u,vec2 pos)
{
	vec2 main = u-pos;
	vec2 uvd = u*(length(u));
	
	float ang = atan(main.y, main.x);
	float dist=length(u); //main
  dist = pow(dist,.01);
	float n = noise(0.);
	
	float f0 = (1.0/(length(u-12.)*16.0+1.0)) * 2.;
	
	f0 = f0*(sin((n*2.0)*12.0)*.1+dist*.1+.8);

	float f2 = max(1.0/(1.0+32.0*pow(length(uvd+0.8*pos),2.0)),.0)*00.25;
	float f22 = max(1.0/(1.0+32.0*pow(length(uvd+0.85*pos),2.0)),.0)*00.23;
	float f23 = max(1.0/(1.0+32.0*pow(length(uvd+0.9*pos),2.0)),.0)*00.21;
	
	vec2 uvx = mix(u,uvd,-0.5);
	
	float f4 = max(0.01-pow(length(uvx+0.45*pos),2.4),.0)*6.0;
	float f42 = max(0.01-pow(length(uvx+0.5*pos),2.4),.0)*5.0;
	float f43 = max(0.01-pow(length(uvx+0.55*pos),2.4),.0)*3.0;
	
	uvx = mix(u,uvd,-.4);
	
	float f5 = max(0.01-pow(length(uvx+0.3*pos),5.5),.0)*2.0;
	float f52 = max(0.01-pow(length(uvx+0.5*pos),5.5),.0)*2.0;
	float f53 = max(0.01-pow(length(uvx+0.7*pos),5.5),.0)*2.0;
	
	uvx = mix(u,uvd,-0.5);
	
	float f6 = max(0.01-pow(length(uvx+0.1*pos),1.6),.0)*6.0;
	float f62 = max(0.01-pow(length(uvx+0.125*pos),1.6),.0)*3.0;
	float f63 = max(0.01-pow(length(uvx+0.15*pos),1.6),.0)*5.0;
	
	vec3 c = vec3(.0);
	c.r+=f2+f4+f5+f6; 
  c.g+=f22+f42+f52+f62; 
  c.b+=f23+f43+f53+f63;
	c+=vec3(f0);
	
	return c;
}

vec3 cc(vec3 color, float factor,float factor2)
{
	float w = color.x+color.y+color.z;
	return mix(color,vec3(w)*factor,w*factor2);
}

void main()
{
#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
  float uvx = uv.x;
  float uvy = uv.y;

  uvx = clamp((uvx-.25)*2., 0., 1.);
  uvy = clamp((uvy-.25)*2., 0., 1.);
  vec2 uv_sun = vec2(uvx, uvy);
  uv_sun = min(uv_sun, 1.);
  vec4 sun = texture2D( TEXTURE_0, uv_sun);
  vec4 moon = vec4(2.4,2.3,1.4,0.);
  moon.rgb *= clamp(1. -length(-pos)  / RENDER_DISTANCE * 1500., 0., 1.);
  
  if(abs(pos.x) > .7) sun.rgb *= 0.;

  vec4 diffuse;
  diffuse.rgb = sun.r == 0. ? moon.rgb : sun.rgb;
  diffuse.a = sun.a * (1.-clamp(length(-pos) / RENDER_DISTANCE * 1., 0., 1.));
  diffuse.a *= pow(FOG_CONTROL.y, 11.);
#else
	vec4 diffuse = texture2D_AA(TEXTURE_0, uv );
#endif

  vec2 u = -pl.xz*.1;
	vec3 lf = pos;

  vec3 c = vec3(1.4,1.2,1.0)*lensflare(lf.xz, u)*2.;
	c = cc(c,.5,.1) * .5;
	diffuse.rgb += mix( c, vec3(0.), clamp(length(pos) /    RENDER_DISTANCE * 30., 0., 1.));

	gl_FragColor = clamp(diffuse, 0., 1.);
}
